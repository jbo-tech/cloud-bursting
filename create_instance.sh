#!/bin/bash
# create_instance.sh - Cr√©er une instance de test

# --- Configuration ---
INSTANCE_TYPE="DEV1-S"      # Un type d'instance √©conomique pour les tests.
INSTANCE_ZONE="fr-par-1"    # La r√©gion parisienne, par exemple.
INSTANCE_NAME="test-plex-scanner-$(date +%s)"  # Nom unique bas√© sur le timestamp
IMAGE="debian_bookworm"        # Debian 12 (Bookworm
ROOT_VOLUME_SIZE="10G"   # Taille du volume racine
# ----------------------

echo "üß™ Cr√©ation d'une instance de test..."

# Cr√©er l'instance avec cloud-init
INSTANCE_ID=$(scw instance server create \
    type=${INSTANCE_TYPE} \
    zone=${INSTANCE_ZONE} \
    name=${INSTANCE_NAME} \
    image=${IMAGE} \
    root-volume=l:${ROOT_VOLUME_SIZE} \
    cloud-init="$(cat setup_instance.sh)" \
    --output=json | jq -r '.id')

if [ -z "$INSTANCE_ID" ]; then
    echo "‚ùå Erreur : La cr√©ation de l'instance a √©chou√©."
    exit 1
fi

echo "‚úÖ Instance cr√©√©e: $INSTANCE_ID"

# Attendre et r√©cup√©rer l'IP
sleep 30
INSTANCE_IP=$(scw instance server get $INSTANCE_ID --output=json | jq -r '.public_ip.address')

echo "üìç IP: $INSTANCE_IP"
echo "üîó SSH: ssh root@$INSTANCE_IP"

# Sauvegarder l'ID pour destruction
echo $INSTANCE_ID > .current_instance_id

# --- Boucle de validation SSH ---
echo "‚è≥ Attente de la disponibilit√© de SSH (peut prendre 1 √† 2 minutes)..."
for i in {1..20}; do
    ssh -q -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=5 "root@${INSTANCE_IP}" "exit"
    if [ $? -eq 0 ]; then
        echo "‚úÖ SSH est pr√™t."
        echo "‚è≥ L'instance d√©marre et ex√©cute le script de configuration en arri√®re-plan..."
        echo "   Vous pouvez surveiller la configuration en vous connectant et en regardant les logs :"
        echo "   ssh root@${INSTANCE_IP} 'tail -f /var/log/cloud-init-output.log'"
        SSH_READY=true
        break
    fi
    sleep 5
done

if [ -z "$SSH_READY" ]; then
    echo "‚ùå √âchec : Le port SSH n'est pas devenu accessible."
    exit 1
fi

# Laisser un peu de temps √† cloud-init pour terminer ses t√¢ches lourdes
echo "‚è≥ Attente de 60 secondes pour la fin de la configuration cloud-init..."
sleep 60

# --- Section de validation automatique ---
echo "---"
echo "üïµÔ∏è  Lancement des validations sur l'instance distante..."
echo "---"

# 1. Boucle d'attente pour le message de succ√®s dans le log
CONFIG_SUCCESS=false
# On essaie pendant 5 minutes maximum (20 tentatives * 15 secondes)
for i in {1..20}; do
    echo "   Tentative ${i}/20 : V√©rification du log cloud-init..."
    if ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "root@${INSTANCE_IP}" "grep -q 'Instance configur√©e et pr√™te' /var/log/cloud-init-output.log"; then
        echo "   ‚úÖ Succ√®s : Le script cloud-init s'est termin√© correctement."
        CONFIG_SUCCESS=true
        break
    fi
    sleep 15
done

if [ "$CONFIG_SUCCESS" = "false" ]; then
    echo "   ‚ùå √âchec : Le script cloud-init ne s'est pas termin√© dans le temps imparti."
    ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "root@${INSTANCE_IP}" "echo '--- Derni√®res lignes du log ---'; tail -n 30 /var/log/cloud-init-output.log"
    exit 1
fi

# Les validations suivantes sont maintenant quasi-certaines de r√©ussir

# 2. V√©rifier la version de Rclone
echo -e "\n2Ô∏è‚É£  Validation de Rclone..."
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "root@${INSTANCE_IP}" "rclone version"

# 3. V√©rifier que l'image Docker Plex est bien pr√©sente
echo -e "\n3Ô∏è‚É£  Validation de l'image Docker..."
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "root@${INSTANCE_IP}" "docker images"

# 4. V√©rifier les permissions du dossier de configuration
echo -e "\n4Ô∏è‚É£  Validation des permissions..."
ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null "root@${INSTANCE_IP}" "ls -ld /opt/plex_data/config"

echo -e "\nüéâ Tout est parfaitement configur√© ! L'instance est pr√™te."
echo "   Pour d√©truire l'instance, lancez : ./destroy_instance.sh"
